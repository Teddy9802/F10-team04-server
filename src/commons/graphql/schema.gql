# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Image {
  id: String!
  imgUrl: String!
  board: Board!
  user: User!
}

type Location {
  id: String!
  center: String!
  path: String!
}

type Board {
  id: String!
  title: String!
  content: String!
  attendCount: Int!
  pickCount: Int!
  appointment: String!
  recruitRegion: String!
  recruitGrade: String!
  recruitSports: String!
  recruitPeople: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  user: User!
  image: Image
  location: Location!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  email: String!
  nickname: String!
  age: String!
  gender: String!
  region: String!
  prefer: String!
  grade: String!
  image: Image
}

type FollowCount {
  id: String!
  followCount: Int!
  followerCount: Int!
  user: User!
}

type Comment {
  id: String!
  comment: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  user: User!
  board: Board!
}

type Pick {
  id: String!
  board: Board!
  user: User!
}

type ReviewImage {
  id: String!
  imgUrl: String!
  isMain: Boolean!
  deletedAt: DateTime!
  reviewBoard: ReviewBoard!
}

type ReviewBoard {
  id: String!
  title: String!
  content: String!
  like: Int!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type AttendList {
  id: String!
  user: User!
  board: Board!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NestedComment {
  id: String!
  nestedComment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  comment: Comment!
  user: User!
}

type ReviewComment {
  id: String!
  reviewComment: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  user: User!
  reviewBoard: ReviewBoard!
}

type FollowerList {
  id: String!
  user2: User!
}

type FollowingList {
  id: String!
  user2: User!
}

type ChatRoom {
  roomName: String!
  roomId: String!
  userId: String!
  userName: String!
  isHost: Boolean!
  createdAt: DateTime!
}

type Query {
  fetchAttendList: [AttendList!]!
  fetchBoard(boardId: String!): Board!
  fetchMyBoard(boardId: String!): Board!
  fetchMyAllBoards(page: Int): [Board!]!
  fetchAllBoards(page: Int): [Board!]!
  fetchAllBoardsWithPickCount(page: Int): [Board!]!
  fetchAllBoardsWithDelete: [Board!]!
  serchBoards(word: String!): [Board!]!
  fetchMyRoomInfo: [ChatRoom!]!
  fetchRooms: [ChatRoom!]!
  fetchComments(boardId: String!, page: Int): [Comment!]!
  fetchFollower(userId: String!): [FollowerList!]!
  fetchFollowing(userId: String!): [FollowingList!]!
  fetchFollowCount(userId: String!): FollowCount!
  fetchMyFollowCount: FollowCount!
  fetchNestedComments(commentId: String!, page: Int): [NestedComment!]!
  fetchReviewBoard(reviewBoardId: String!): ReviewBoard!
  fetchAllReviewBoards(page: Int): [ReviewBoard!]!
  fetchReviewComments(reviewBoardId: String!, page: Int): [ReviewComment!]!
  fetchReviewBoardImage(reviewBoardId: String!): [ReviewImage!]!
  fetchAllReviewBoardImages: [ReviewImage!]!
  fetchMyPickBoards(page: Int): [Pick!]!
  fetchUsers: [User!]!
  fetchUser(userId: String!): User!
  fetchUserLoggedIn: User!
}

type Mutation {
  attendList(boardId: String!): String!
  login(email: String!, password: String!): String!
  restoreAccessToken: String!
  logout: String!
  createBoard(createBoardInput: CreateBoardInput!): Board!
  updateBoard(boardId: String!, updateBoardInput: UpdateBoardInput!): Board!
  deleteBoard(boardId: String!): Boolean!
  makeRoom: [ChatRoom!]!
  createRoom(roomName: String!): ChatRoom!
  createComment(boardId: String!, comment: String!): Comment!
  deleteComment(commentId: String!): Boolean!
  updateComment(commentId: String!, updateComment: String!): Comment!
  sendTokenToEmail(email: String!): String!
  checkTokenEmail(email: String!, token: String!): String!
  uploadFile(file: Upload!): String!
  uploadFiles(files: [Upload!]!): [String!]!
  followUser(userId: String!): String!
  likeReviewBoard(reviewBoardId: String!): String!
  createNestedComment(commentId: String!, nestedComment: String!): NestedComment!
  deleteNestedComment(nestedCommentId: String!): Boolean!
  updateNestedComment(nestedCommentId: String!, updateNestedComment: String!): NestedComment!
  createReviewBoard(createReviewBoardInput: CreateReviewBoardInput!, attendListId: String!): ReviewBoard!
  updateReviewBoard(reviewBoardId: String!, updateReviewBoardInput: UpdateReviewBoardInput!): ReviewBoard!
  deleteReviewBoard(reviewBoardId: String!): Boolean!
  createReviewComment(reviewBoardId: String!, reviewComment: String!): ReviewComment!
  deleteReviewComment(reviewCommentId: String!): Boolean!
  updateReviewComment(reviewCommentId: String!, updateReviewComment: String!): ReviewComment!
  deleteReviewBoardImage(reviewImageId: String!, reviewBoardId: String!): Boolean!
  pickBoard(boardId: String!): String!
  checkNickName(nickname: String!): String!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  deleteUser(imageId: String!): Boolean!
  findUserPassword(email: String!): String!
  updatePassword(password: String!, rePassword: String!): String!
}

input CreateBoardInput {
  title: String!
  content: String!
  appointment: String!
  recruitRegion: String!
  recruitGrade: String!
  recruitSports: String!
  recruitPeople: Int!
  image: String
  location: LocationInput!
}

input LocationInput {
  center: String!
  path: String!
}

input UpdateBoardInput {
  title: String
  content: String
  appointment: String
  recruitRegion: String
  recruitGrade: String
  recruitSports: String
  recruitPeople: Int
  image: String
  location: LocationInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateReviewBoardInput {
  title: String!
  content: String!
  reviewImage: [String!]!
}

input UpdateReviewBoardInput {
  title: String
  content: String
  reviewImage: [String!]
}

input CreateUserInput {
  email: String!
  nickname: String!
  password: String!
  cpassword: String!
  age: String!
  gender: String!
  image: String
  region: String!
  prefer: String!
  grade: String!
}

input UpdateUserInput {
  nickname: String
  age: String
  gender: String
  image: String
  region: String
  prefer: String
  grade: String
}