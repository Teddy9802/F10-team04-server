# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  email: String!
  nickname: String!
  age: String!
  gender: String!
  profileUrl: String!
  region: String!
  prefer: String!
  grade: String!
  userLikeCount: Int!
}

type Image {
  id: String!
  imgUrl: String
}

type Board {
  id: String!
  title: String!
  content: String!
  attendCount: Int!
  pickCount: Int!
  appointment: String!
  recruitRegion: String!
  recruitGrade: String!
  recruitSports: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  user: User!
  image: Image
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  user: User!
  board: Board!
}

type Pick {
  id: String!
  board: Board!
  user: User!
}

type NestedComment {
  id: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  comment: Comment!
  user: User!
}

type ReviewBoard {
  id: String!
  title: String!
  content: String!
  like: Int!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type ReviewComment {
  id: String!
  reviewComment: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  user: User!
  reviewBoard: ReviewBoard!
}

type Query {
  fetchBoard(boardId: String!): Board!
  fetchAllBoards(page: Int): [Board!]!
  fetchAllBoardsWihtPickCount(page: Int): [Board!]!
  fetchAllBoardsWithDelete: [Board!]!
  fetchComment(commentId: String!): Comment!
  fetchNestedComment(nestedCommentId: String!): NestedComment!
  fetchReviewBoard(reviewBoardId: String!): ReviewBoard!
  fetchReviewComments(reviewBoardId: String!, page: Int): [ReviewComment!]!
  fetchMyPick: [Pick!]!
  checkNickName(nickname: String!): String!
  fetchUsers: [User!]!
}

type Mutation {
  login(email: String!, password: String!): String!
  restoreAccessToken: String!
  logout: String!
  createBoard(createBoardInput: CreateBoradInput!): Board!
  updateBoard(boardId: String!, updateBoardInput: UpdateBoardInput!): Board!
  deleteBoard(boardId: String!): Boolean!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  deleteComment(commentId: String!): Boolean!
  updateComment(commentId: String!, UpdateCommentInput: UpdateCommentInput!): Comment!
  sendTokenToEmail(email: String!): String!
  checkTokenEmail(email: String!, token: String!): String!
  uploadFile(file: Upload!): String!
  uploadFiles(files: [Upload!]!): [String!]!
  likeReviewBoard(reviewBoardId: String!): String!
  createNestedComment(createNestedCommentInput: CreateNestedCommentInput!): NestedComment!
  deleteNestedComment(nestedCommentId: String!): Boolean!
  updateNestedComment(nestedCommentId: String!, UpdateNestedCommentInput: UpdateNestedCommentInput!): NestedComment!
  createReviewBoard(createReviewBoardInput: CreateReviewBoardInput!): String!
  createReviewComment(reviewBoardId: String!, reviewComment: String!): ReviewComment!
  pickBoard(boardId: String!): String!
  createUser(createUserInput: CreateUserInput!): User!
  likeUser(userId: String!): String!
}

input CreateBoradInput {
  title: String!
  content: String!
  appointment: String!
  recruitRegion: String!
  recruitGrade: String!
  recruitSports: String!
  image: String
}

input UpdateBoardInput {
  title: String
  content: String
  appointment: String
  recruitRegion: String
  recruitGrade: String
  recruitSports: String
  image: String
}

input CreateCommentInput {
  userId: String!
  boardId: String!
  content: String!
}

input UpdateCommentInput {
  userId: String
  boardId: String
  content: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateNestedCommentInput {
  content: String!
  commentId: String!
  userId: String!
}

input UpdateNestedCommentInput {
  content: String
  commentId: String
  userId: String
}

input CreateReviewBoardInput {
  title: String!
  content: String!
}

input CreateUserInput {
  email: String!
  nickname: String!
  password: String!
  age: String!
  gender: String!
  profileUrl: String
  region: String!
  prefer: String!
  grade: String!
}